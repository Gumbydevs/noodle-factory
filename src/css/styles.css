/* This file contains the styles for the game, including layout, card designs, animtions, and overall aesthetics to create a quirky and engaging user interface. */

@keyframes wiggle {
    0% { transform: rotate(-15deg); }
    100% { transform: rotate(15deg); }
}

@keyframes slideIn {
    from { transform: translateX(100%); }
    to { transform: translateX(0); }
}

@keyframes pulse {
    0% { transform: scale(1); }
    50% { transform: scale(1.05); }
    100% { transform: scale(1); }
}

/* Add new keyframes for chaos effects */
@keyframes melt {
    0% { transform: perspective(500px) rotateX(0deg); }
    50% { transform: perspective(500px) rotateX(30deg) scaleY(1.5); }
    100% { transform: perspective(500px) rotateX(0deg); }
}

@keyframes distort {
    0% { transform: skew(0deg); }
    25% { transform: skew(5deg, 5deg); }
    75% { transform: skew(-5deg, -5deg); }
    100% { transform: skew(0deg); }
}

/* Replace the glitch keyframes with heatwave distortion */
@keyframes heatwave {
    0% { transform: translate3d(0, 0, 0) rotate(0deg); }
    25% { transform: translate3d(2px, -1px, 0) rotate(0.5deg); }
    50% { transform: translate3d(-1px, 2px, 0) rotate(-0.5deg); }
    75% { transform: translate3d(1px, -2px, 0) rotate(0.25deg); }
    100% { transform: translate3d(0, 0, 0) rotate(0deg); }
}

@keyframes noise {
    0%, 100% { transform: translate(0, 0); }
    10% { transform: translate(-5%, -5%); }
    20% { transform: translate(10%, 5%); }
    30% { transform: translate(-5%, 10%); }
    40% { transform: translate(15%, -5%); }
    50% { transform: translate(-15%, 15%); }
    60% { transform: translate(5%, 5%); }
    70% { transform: translate(-10%, -10%); }
    80% { transform: translate(5%, -15%); }
    90% { transform: translate(-5%, 10%); }
}

/* Subtle animations for lower chaos levels */
@keyframes subtleWiggle {
    0% { transform: rotate(0deg); }
    25% { transform: rotate(0.3deg); }
    75% { transform: rotate(-0.3deg); }
    100% { transform: rotate(0deg); }
}

@keyframes subtleDistort {
    0% { transform: skew(0deg); }
    25% { transform: skew(0.5deg, 0.5deg); }
    75% { transform: skew(-0.5deg, -0.5deg); }
    100% { transform: skew(0deg); }
}

@keyframes crtWave {
    0%, 100% { transform: translate3d(0, 0, 0); }
    50% { transform: translate3d(0, 1px, 0); }
}

@keyframes crtDistort {
    0% { transform: skew(0.15deg, 0deg); }
    25% { transform: skew(-0.15deg, 0deg); }
    50% { transform: skew(0.15deg, 0deg); }
    75% { transform: skew(-0.15deg, 0deg); }
    100% { transform: skew(0.15deg, 0deg); }
}

@keyframes crtFlicker {
    0% { opacity: 0.98; }
    50% { opacity: 1; }
    100% { opacity: 0.98; }
}

@keyframes scanline {
    0% { transform: translateY(0); }
    100% { transform: translateY(100vh); }
}

@keyframes removeWarning {
    0%, 90% {
        color: #ff4444;
        background: linear-gradient(to right, #2c3e50, #c0392b);
        transform: scale(1.05);
    }
    100% {
        color: #3498db;
        background: linear-gradient(to right, #2c3e50, #3a506b);
        transform: scale(1);
        animation: none;
    }
}

@keyframes jiggle {
    0% { transform: rotate(0deg); }
    25% { transform: rotate(2deg); }
    75% { transform: rotate(-2deg); }
    100% { transform: rotate(0deg); }
}

@keyframes noodleWiggle {
    0% { transform: rotate(0deg) scaleX(1); }
    25% { transform: rotate(3deg) scaleX(1.1); }
    50% { transform: rotate(-2deg) scaleX(0.95); }
    75% { transform: rotate(2deg) scaleX(1.05); }
    100% { transform: rotate(0deg) scaleX(1); }
}

/* Add intermittent animation trigger */
@keyframes randomTrigger {
    0%, 85% { animation: none; }
    85.0001%, 100% { animation: jiggle 1.5s ease-in-out; }
}

/* Update the hoverExcited animation */
@keyframes hoverExcited {
    0% { transform: scale(1.05) rotate(0deg); }
    10% { transform: scale(1.05) rotate(-3deg); }
    20% { transform: scale(1.05) rotate(3deg); }
    30% { transform: scale(1.05) rotate(-2deg); }
    40% { transform: scale(1.05) rotate(2deg); }
    50% { transform: scale(1.05) rotate(-1deg); }
    60% { transform: scale(1.05) rotate(1deg); }
    70% { transform: scale(1.05) rotate(-0.5deg); }
    80% { transform: scale(1.05) rotate(0.5deg); }
    90% { transform: scale(1.05) rotate(-0.2deg); }
    100% { transform: scale(1.05) rotate(0deg); }
}

@keyframes squiggle {
    0% { transform: skew(0deg, 0deg); }
    25% { transform: skew(5deg, 2deg); }
    50% { transform: skew(0deg, 0deg); }
    75% { transform: skew(-5deg, -2deg); }
    100% { transform: skew(0deg, 0deg); }
}

/* Add these new keyframes near the other animations */
@keyframes statsFloat {
    0%, 100% {
        transform: translateY(0) rotate(-0.1deg);
    }
    50% {
        transform: translateY(-2px) rotate(0.1deg);
    }
}

@keyframes statsJitter {
    0% { transform: rotate(0deg); }
    25% { transform: rotate(0.2deg); }
    75% { transform: rotate(-0.2deg); }
    100% { transform: rotate(0deg); }
}

/* Add these new keyframes near the other card animations */
@keyframes randomJitter {
    0%, 100% { transform: rotate(0deg); }
    50% { transform: rotate(1deg); }
}

/* Add these new animations without modifying existing styles */
@keyframes chaosShake {
    0%, 100% { transform: translateX(0); }
    25% { transform: translateX(-5px); }
    75% { transform: translateX(5px); }
}

@keyframes chaosPulse {
    0%, 100% { color: inherit; }
    50% { color: #ff0000; }
}

/* Enhance existing chaos effects and add new ones */
@keyframes chaosWarp {
    0% { background: #1a1a1a; }
    33% { background: #1a1515; }
    66% { background: #151a1a; }
    100% { background: #1a1a1a; }
}

/* Enhance screen shake */
@keyframes chaosNoise {
    0%, 40%, 100% { transform: translate3d(0, 0, 0); }
    42% { transform: translate3d(1.15px, -1.15px, 0); }
    44% { transform: translate3d(-1.15px, 1.15px, 0); }
    46% { transform: translate3d(1.15px, 1.15px, 0); }
    48% { transform: translate3d(0, 0, 0); }
}

/* Add new noodle rain animations */
@keyframes noodleFall {
    0% {
        transform: translateY(-20px) rotate(0deg);
        opacity: 0.8;
    }
    90% {
        opacity: 0.8;
    }
    100% {
        transform: translateY(100vh) rotate(720deg);
        opacity: 0;
    }
}

/* Add a new function to assign random animations to each noodle */
@keyframes noodleFallRandom {
    0% {
        transform: translateY(-20px) rotate(0deg);
        opacity: 0.8;
    }
    90% {
        opacity: 0.8;
    }
    100% {
        transform: translateY(100vh) rotate(var(--spin-amount));
        opacity: 0;
    }
}

/* First, add these new keyframes if not already present */
@keyframes chaosBackgroundPulse {
    0% { background-color: #000000; }
    50% { background-color: #1f1d1d; }  /* Slightly warmer dark */
    75% { background-color: #1d1f1f; }  /* Slightly cooler dark */
    100% { background-color: #0a0a0a; }
}

@keyframes chaosColorShift {
    0% { filter: hue-rotate(0deg); }
    50% { filter: hue-rotate(15deg); }
    100% { filter: hue-rotate(0deg); }
}

/* Add these new keyframes near the other animations */
@keyframes gameOverFlash {
    0%, 100% { background: rgba(0, 0, 0, 0.95); }
    25%, 75% { background: rgba(139, 0, 0, 0.95); }
}

@keyframes touchExcited {
    0% { transform: scale(1.02) rotate(0deg); }
    25% { transform: scale(1.02) rotate(-2deg); }
    50% { transform: scale(1.02) rotate(2deg); }
    75% { transform: scale(1.02) rotate(-1deg); }
    100% { transform: scale(1.02) rotate(0deg); }
}

/* noodle animations */
@keyframes noodleFlyAcross {
    0% {
        transform: translateX(-120vw) scaleX(0.8);
        opacity: 0;
    }
    10% {
        transform: translateX(-80vw) scaleX(1.2);
        opacity: 1;
    }
    45% {
        transform: translateX(0) scaleX(0.9);
        opacity: 1;
    }
    85% {
        transform: translateX(80vw) scaleX(1.1);
        opacity: 1;
    }
    100% {
        transform: translateX(120vw) scaleX(1.5);
        opacity: 0;
    }
}

/* Add new intense animations for max chaos */
@keyframes chaoticSpin {
    0% { transform: rotate(0deg) scale(1); }
    25% { transform: rotate(2deg) scale(1.02); }
    75% { transform: rotate(-2deg) scale(0.98); }
    100% { transform: rotate(0deg) scale(1); }
}

/* Update this color cycle animation for better compatibility */
@keyframes colorCycle {
    33% { background-color: #151a1a; }
    66% { background-color: #1a151a; }
    100% { background-color: #1a1515; }
}

/* Add new keyframes for stat value changes */
@keyframes statChange {
    0% { transform: scale(1); }
    50% { transform: scale(1.3); filter: brightness(1.5); }
    100% { transform: scale(1); }
}

@keyframes statGlow {
    0% { text-shadow: 0 0 5px currentColor; }
    50% { text-shadow: 0 0 15px currentColor, 0 0 25px currentColor; }
    100% { text-shadow: 0 0 5px currentColor; }
}

@keyframes statIncrease {
    0% { transform: scale(1); }
    50% { transform: scale(1.3); filter: brightness(1.5); }
    100% { transform: scale(1); }
}

@keyframes statDecrease {
    0% { transform: scale(1); }
    50% { transform: scale(1.3); }
    100% { transform: scale(1); }
}

@keyframes wiggle-selected {
    0% { transform: rotate(0deg); }
    25% { transform: rotate(-5deg); }
    75% { transform: rotate(5deg); }
    100% { transform: rotate(0deg); }
}

/* Add these new keyframes near your other animation definitions */
@keyframes cardTwitch {
    0%, 88%, 100% { transform: translate(0, 0) rotate(0deg); }
    89% { transform: translate(2px, -2px) rotate(6deg); }
    91% { transform: translate(-1px, 1px) rotate(-2deg); }
    93% { transform: translate(1px, 0) rotate(1deg); }
}

@keyframes cardTwitchChaos {
    0%, 75%, 100% { transform: rotate(0deg) translateY(0); }
    78% { transform: rotate(-3deg) translateY(-3px); }
    82% { transform: rotate(2.5deg) translateY(2px); }
    85% { transform: rotate(-2deg) translateY(-2px); }
    88% { transform: rotate(1.5deg) translateY(1px); }
    92% { transform: rotate(-1deg) translateY(-1px); }
}

/* Add new life-like twitching keyframes */
@keyframes cardLife {
    0%, 15%, 85%, 100% { transform: translate(0, 0) rotate(0deg); }
    16% { transform: translate(-2px, 1px) rotate(-4deg); }
    19% { transform: translate(1px, -1px) rotate(2deg); }
    35% { transform: translate(0, 0) rotate(0deg); }
    36% { transform: translate(2px, -2px) rotate(5deg); }
    39% { transform: translate(-1px, 1px) rotate(-2deg); }
    65% { transform: translate(0, 0) rotate(0deg); }
    66% { transform: translate(-2px, -1px) rotate(-3deg); }
    69% { transform: translate(1px, 1px) rotate(1deg); }
}

@keyframes cardFloat {
    0%, 100% { transform: translateY(0); }
    50% { transform: translateY(-3px); }
}

/* Add these new keyframes near your other animation definitions */
@keyframes cardAlive {
    0% { transform: translate(0, 0) rotate(0deg); }
    25% { transform: translate(1px, -1px) rotate(0.3deg); }
    50% { transform: translate(-1px, 1px) rotate(-0.3deg); }
    75% { transform: translate(1px, 1px) rotate(0.2deg); }
    100% { transform: translate(0, 0) rotate(0deg); }
}

@keyframes cardAliveChaos1 {
    0% { transform: translate(0, 0) rotate(0deg); }
    33% { transform: translate(2px, -2px) rotate(0.5deg); }
    66% { transform: translate(-2px, 2px) rotate(-0.5deg); }
    100% { transform: translate(0, 0) rotate(0deg); }
}

@keyframes cardAliveChaos2 {
    0% { transform: translate(0, 0) rotate(0deg); }
    25% { transform: translate(3px, -2px) rotate(1deg); }
    50% { transform: translate(-3px, 3px) rotate(-1deg); }
    75% { transform: translate(2px, -3px) rotate(0.5deg); }
    100% { transform: translate(0, 0) rotate(0deg); }
}

@keyframes cardAliveChaos3 {
    0% { transform: translate(0, 0) rotate(0deg); }
    20% { transform: translate(4px, -3px) rotate(2deg); }
    40% { transform: translate(-4px, 4px) rotate(-2deg); }
    60% { transform: translate(3px, -4px) rotate(1.5deg); }
    80% { transform: translate(-3px, 3px) rotate(-1.5deg); }
    100% { transform: translate(0, 0) rotate(0deg); }
}

@keyframes selectedCardVanish {
    0% { 
        transform: rotate(0deg) scale(1);
        opacity: 1;
        background: #555;
        clip-path: polygon(0 0, 100% 0, 100% 100%, 0 100%);
    }
    15% { 
        transform: rotate(-5deg) scale(1.1);
        opacity: 1;
        background: #555;
        clip-path: polygon(0 0, 100% 0, 100% 100%, 0 100%);
    }
    30% {
        transform: rotate(4deg) scale(1.1);
        opacity: 0.9;
        background: #666;
        clip-path: polygon(2% 2%, 98% 2%, 98% 98%, 2% 98%);
    }
    50% {
        transform: rotate(-2deg) scale(1.05);
        opacity: 0.7;
        background: #777;
        clip-path: polygon(5% 5%, 95% 5%, 95% 95%, 5% 95%);
    }
    75% {
        transform: rotate(1deg) scale(0.95) translateY(-10px);
        opacity: 0.4;
        background: #888;
        clip-path: polygon(15% 15%, 85% 15%, 85% 85%, 15% 85%);
    }
    100% { 
        transform: scale(0.8) translateY(-20px);
        opacity: 0;
        background: #999;
        clip-path: polygon(45% 45%, 55% 45%, 55% 55%, 45% 55%);
    }
}

@keyframes excitedWiggle {
    0% { transform: rotate(0deg) scale(1); }
    15% { transform: rotate(-5deg) scale(1.1); }
    30% { transform: rotate(4deg) scale(1.1); }
    45% { transform: rotate(-3deg) scale(1.08); }
    60% { transform: rotate(2deg) scale(1.05); }
    75% { transform: rotate(-1deg) scale(1.02); }
    100% { transform: rotate(0deg) scale(1); }
}

/* Add these new keyframes near your other card animations */
@keyframes chromaticBackground1 {
    0% { background: linear-gradient(45deg, #444, #474747); }
    50% { background: linear-gradient(45deg, #474747, #444); }
    100% { background: linear-gradient(45deg, #444, #474747); }
}

@keyframes chromaticBackground2 {
    0% { background: linear-gradient(45deg, #444, #484840); }
    50% { background: linear-gradient(45deg, #484840, #444848); }
    100% { background: linear-gradient(45deg, #444, #484840); }
}

@keyframes chromaticBackground3 {
    0% { background: linear-gradient(45deg, #444, #484438); }
    33% { background: linear-gradient(45deg, #484438, #444848); }
    66% { background: linear-gradient(45deg, #444848, #484844); }
    100% { background: linear-gradient(45deg, #444, #484438); }
}

@keyframes chromaticBackgroundMax {
    0% { background: linear-gradient(45deg, #444, #484438); }
    25% { background: linear-gradient(45deg, #484438, #444848); }
    50% { background: linear-gradient(45deg, #444848, #484844); }
    75% { background: linear-gradient(45deg, #484844, #483844); }
    100% { background: linear-gradient(45deg, #444, #484438); }
}

/* Add these new keyframes near your other animation definitions */
@keyframes colorCycleWord {
    0% { color: #3498db; }  /* Blue */
    25% { color: #2ecc71; }  /* Green */
    50% { color: #f1c40f; }  /* Yellow */
    75% { color: #e74c3c; }  /* Red */
    100% { color: #3498db; }  /* Blue */
}

@keyframes rainbowText {
    0% { color: #3498db; }  /* Blue */
    20% { color: #2ecc71; }  /* Green */
    40% { color: #f1c40f; }  /* Yellow */
    60% { color: #e74c3c; }  /* Red */
    80% { color: #9b59b6; }  /* Purple */
    100% { color: #3498db; }  /* Blue */
}

@keyframes chaosText {
    0% { color: #e74c3c; text-shadow: 0 0 5px #e74c3c33; }    /* Red */
    33% { color: #c0392b; text-shadow: 0 0 8px #c0392b33; }    /* Dark Red */
    66% { color: #ff5555; text-shadow: 0 0 12px #ff555533; }   /* Bright Red */
    100% { color: #e74c3c; text-shadow: 0 0 5px #e74c3c33; }   /* Red */
}

/* Add these style rules to handle the message text effects */
.chaos-level-1 .message-text span {
    animation: colorCycleWord 4s infinite;
    animation-delay: calc(var(--word-index) * -0.3s);
    color: inherit; /* Use the color from message type */
}

.chaos-level-2 .message-text span {
    animation: rainbowText 3s infinite;
    animation-delay: calc(var(--word-index) * -0.2s);
    text-shadow: 0 0 5px currentColor;
    color: inherit;
}

.chaos-level-3 .message-text span {
    animation: chaosText 2s infinite;
    animation-delay: calc(var(--word-index) * -0.1s);
    color: inherit;
}

.chaos-level-max .message-text span {
    animation: rainbowText 1s infinite;
    animation-delay: calc(var(--word-index) * -0.1s);
    text-shadow: 0 0 8px currentColor;
    color: inherit;
}

.hidden {
    display: none !important;
}

body {
    background: #1a1a1a;
    color: #fff;
    font-family: 'Courier New', monospace;
    margin: 0;
    padding: 0;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: flex-start; /* Change from center to flex-start */
    min-height: 100vh; /* Change height to min-height */
}

/* Update chaos level animations to keep impact but improve performance */
body.chaos-level-1 {
    animation: chaosBackgroundPulse 15s ease-in-out infinite !important;
    filter: hue-rotate(5deg) !important;
}

body.chaos-level-2 {
    animation: chaosBackgroundPulse 10s ease-in-out infinite !important;
    filter: hue-rotate(15deg) saturate(1.2) !important;
    background: linear-gradient(to right, #1a1515, #151a1a) !important;
}

body.chaos-level-3 {
    animation: 
        chaosBackgroundPulse 5s ease-in-out infinite,
        maxChaosWarp 6s ease-in-out infinite,
        chaosShake 10s ease-in-out infinite !important;
    filter: hue-rotate(25deg) saturate(1.4) brightness(1.1) !important;
    background: linear-gradient(45deg, #1a1515, #151a1a) !important;
    transform-style: preserve-3d;
    perspective: 1000px;
}

/* Update chaos-level-max for better performance */
body.chaos-level-max {
    animation: 
        chaosBackgroundPulse 4s ease-in-out infinite,
        maxChaosWarp 6s ease-in-out infinite !important;
    will-change: transform;
    backface-visibility: hidden;
    perspective: 1000px;
}

/* Remove the old glitch overlay and replace with heat distortion */
body.chaos-level-max::after {
    content: '';
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: linear-gradient(
        0deg,
        transparent,
        rgba(255, 255, 255, 0.03) 50%,
        transparent
    );
    pointer-events: none;
    z-index: 1;
    will-change: transform, opacity;
    animation: heatwaveGradient 4s ease-in-out infinite;
}

/* Optimize gradient animation */
@keyframes heatwaveGradient {
    0%, 100% { 
        opacity: 0.3;
        transform: translateY(0);
    }
    50% { 
        opacity: 0.2;
        transform: translateY(-5px);
    }
}

/* More impactful but efficient maxChaosWarp */
@keyframes maxChaosWarp {
    0%, 100% { 
        transform: perspective(2000px) rotate3d(1, 1, 0, 1deg); 
    }
    50% { 
        transform: perspective(2000px) rotate3d(-1, 1, 0, 1deg); 
    }
}

body.chaos-noise {
    position: relative !important;
    overflow: hidden !important;
}

body.chaos-noise::before {
    content: "" !important;
    position: fixed !important;
    top: 0 !important;
    left: 0 !important;
    width: 100% !important;
    height: 100% !important;
    pointer-events: none !important;
    z-index: 9999 !important;
    background-size: 100px 100px; /* Increase pattern size */
    opacity: 0.05 !important;
    animation: none; /* Remove animation */
}

#game-container {
    max-width: 800px;
    width: 100%;
    margin: 0 auto; /* Remove top margin */
    text-align: center;
    min-height: 600px;
    display: flex;
    flex-direction: column;
    position: relative;
    padding-top: 10px; /* Add small padding instead of margin */
}

#game-container.chaos-level-2,
#game-container.chaos-level-3,
#game-container.chaos-level-max {
    position: relative !important;
    z-index: 1 !important;
}

#game-container.chaos-level-2::after,
#game-container.chaos-level-3::after,
#game-container.chaos-level-max::after {
    content: "" !important;
    position: absolute !important;
    top: 0 !important;
    left: 0 !important;
    right: 0 !important;
    bottom: 0 !important;
    pointer-events: none !important;
    z-index: -1 !important;
    background: radial-gradient(circle at 50% 50%, rgba(255,0,0,0.1), transparent) !important;
    animation: chaosColorShift 8s infinite !important;
}

.chaos-level-3 #game-container,
.chaos-level-max #game-container {
    animation: maxChaosWarp 6s ease-in-out infinite;
    will-change: transform;
    transform-style: preserve-3d;
    backface-visibility: hidden;
}

.chaos-level-max #game-container::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    pointer-events: none;
    background: transparent;
    mix-blend-mode: screen;
    animation: chromaticShift 4s ease-in-out infinite;
}

@keyframes chromaticShift {
    0% { text-shadow: 2px 0 0 #ff000033, -2px 0 0 #00ff0033; }
    50% { text-shadow: -2px 0 0 #ff000033, 2px 0 0 #00ff0033; }
    100% { text-shadow: 2px 0 0 #ff000033, -2px 0 0 #00ff0033; }
}

#stats {
    display: flex;
    justify-content: space-around;
    margin: 20px;
    padding: 10px;
    background: #333;
    border-radius: 5px;
    width: calc(100% - 40px); /* Fix width accounting for margins */
    min-height: 80px; /* Add fixed height */
    animation: 
        statsFloat 6s ease-in-out infinite,
        statsJitter 3s ease-in-out infinite;
    animation-delay: 
        0s,
        calc(random() * -3s);
    transform-origin: center center;
}

.chaos-level-max #stats {
    animation: 
        statsFloat 4s ease-in-out infinite,
        chaoticSpin 6s infinite !important;
}

.stat {
    text-align: center;
    padding: 10px;
    width: 100px; /* Fix width */
    min-width: 100px; /* Ensure minimum width */
    display: flex;
    flex-direction: column;
    align-items: center;
    animation: statsJitter 2.5s ease-in-out infinite;
    animation-delay: calc(random() * -2s);
}

.stat-progress {
    width: 80px;
    height: 4px;
    background: transparent;
    border: 1px solid rgba(255, 255, 255, 0.3);
    border-radius: 2px;
    margin-top: 5px;
    overflow: hidden;
}

.stat-progress-fill {
    height: 100%;
    width: 0%;
    transition: width 0.3s ease-out;
}

.stat-progress-fill.prestige-color { background-color: #f1c40f; }
.stat-progress-fill.chaos-color { background-color: #e74c3c; }
.stat-progress-fill.ingredients-color { background-color: #2ecc71; }
.stat-progress-fill.energy-color { background-color: #3498db; }
.stat-progress-fill.turn-color { background-color: #9b59b6; }

/* Update the turn progress bar styles */
.stat-progress-fill.turn-color {
    width: 100% !important; /* Force full width */
    background: #9b59b6; /* Default purple */
    transition: background-color 0.3s ease;
}

/* Add chaos-based colors for the turn bar */
body.chaos-level-1 .stat-progress-fill.turn-color {
    background: linear-gradient(90deg, #9b59b6, #8e44ad);
    animation: pulseTempo 2s ease-in-out infinite;
}

body.chaos-level-2 .stat-progress-fill.turn-color {
    background: linear-gradient(90deg, #e74c3c, #c0392b);
    animation: pulseTempo 1.5s ease-in-out infinite;
}

body.chaos-level-3 .stat-progress-fill.turn-color {
    background: linear-gradient(90deg, #c0392b, #962d22);
    animation: pulseTempo 1s ease-in-out infinite;
}

body.chaos-level-max .stat-progress-fill.turn-color {
    background: linear-gradient(90deg, #ff0000, #990000);
    animation: pulseTempo 0.5s ease-in-out infinite;
}

@keyframes pulseTempo {
    0%, 100% { opacity: 0.8; }
    50% { opacity: 1; }
}

.stat-label {
    font-size: 0.9em;
    color: #ffffff;
    margin-bottom: 5px;
}

.stat-value {
    font-size: 1.8em;
    font-weight: bold;
    text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
    transition: transform 0.3s ease;
    display: inline-block;  /* Required for transform */
}

/* Add classes for stat changes */
.stat-value.changed {
    animation: statGlow 0.6s ease-in-out;
}

.stat-value.increase {
    animation: statGlow 0.6s ease-in-out;
}

.stat-value.decrease {
    animation: statDecrease 0.6s ease-in-out;
    color: #e74c3c !important;  /* Red color for decreases */
}

/* Color-specific glow effects */
.prestige-color.changed { text-shadow: 0 0 10px #f1c40f; }
.chaos-color.changed { text-shadow: 0 0 10px #e74c3c; }
.ingredients-color.changed { text-shadow: 0 0 10px #2ecc71; }
.energy-color.changed { text-shadow: 0 0 10px #3498db; }

/* Color-specific glow effects for increases */
.prestige-color.increase { text-shadow: 0 0 10px #f1c40f; }
.chaos-color.increase { text-shadow: 0 0 10px #e74c3c; }
.ingredients-color.increase { text-shadow: 0 0 10px #2ecc71; }
.energy-color.increase { text-shadow: 0 0 10px #3498db; }

/* Red glow effect for all decreases */
.stat-value.decrease { text-shadow: 0 0 10px #e74c3c; }

/* Stat-specific colors */
.prestige-color {
    color: #f1c40f; /* Golden yellow */
}

.chaos-color {
    color: #e74c3c; /* Red */
}

.ingredients-color {
    color: #2ecc71; /* Green */
}

.energy-color {
    color: #3498db; /* Blue */
}

.turn-color {
    color: #9b59b6; /* Purple */
}

/* Color classes for stat names */
.prestige-color { color: #f1c40f; }    /* Golden yellow */
.chaos-color { color: #e74c3c; }        /* Red */
.ingredients-color { color: #2ecc71; }  /* Green */
.energy-color { color: #3498db; }       /* Blue */

/* Plus/minus sign colors */
.positive { color: #2ecc71 !important; } /* Always green for plus */
.negative { color: #e74c3c !important; } /* Always red for minus */

/* Add matching color classes for stat modifiers using the same colors as stat bars */
.stat-modifier.prestige {
    color: var(--prestige-color, #27ae60);  /* matches prestige-color */
}

.stat-modifier.chaos {
    color: var(--chaos-color, #e74c3c);  /* matches chaos-color */
}

.stat-modifier.ingredients {
    color: var(--ingredients-color, #f39c12);  /* matches ingredients-color */
}

.stat-modifier.workers {
    color: var(--energy-color, #3498db);  /* matches energy-color */
}

.turn-score {
    color: #9b59b6 !important; /* Same purple as turn-color */
}

h1 {
    font-size: 3em;
    margin: 10px 0; /* Reduce top and bottom margins */
    text-align: center;
    color: #d35400;
}

#cards-container {
    display: flex;
    justify-content: center;
    align-items: center;
    gap: 20px;
    margin: 20px auto;
    min-height: 320px;
    perspective: 1000px;
    position: relative;
}

/* Optimize card animations with combined transforms */
.card {
    display: flex;
    flex-direction: column;
    justify-content: space-between;
    width: 200px;
    height: 300px;
    margin: 10px;
    padding: 15px;
    background: #444;
    border-radius: 10px;
    cursor: pointer;
    position: relative;
    overflow: hidden;
    transition: background-color 0.3s ease, transform 0.3s ease, opacity 0.3s ease;
    transform-origin: center center;
    opacity: 1;
    animation: 
        cardLife 4.5s ease-in-out infinite,
        cardFloat 3s ease-in-out infinite;
    animation-delay: 
        calc(random() * -4s),
        calc(random() * -3s);
    will-change: transform, opacity, background-color;
    backface-visibility: hidden;
    transform: translateZ(0);
    -webkit-transform: translateZ(0);
}

/* Override all other card animations when disappearing */
.card.disappearing {
    animation: none !important;
    transition: all 0.4s ease-in-out !important;
    pointer-events: none !important;
    z-index: 100 !important;
}

/* Scale animations with chaos levels */
.chaos-level-1 .card {
    animation: 
        cardLife 6s ease-in-out infinite,
        cardTwitch 4s ease-in-out infinite,
        chromaticBackground1 4s ease-in-out infinite !important;
    animation-delay: 
        calc(random() * -6s),
        calc(random() * -4s);
}

.chaos-level-2 .card {
    animation: 
        cardLife 5s ease-in-out infinite,
        cardTwitch 3s ease-in-out infinite,
        chromaticBackground2 3s ease-in-out infinite !important;
    animation-delay: 
        calc(random() * -5s),
        calc(random() * -3s);
}

.chaos-level-3 .card {
    animation: 
        cardLife 4s ease-in-out infinite,
        cardTwitch 2s ease-in-out infinite,
        chromaticBackground3 2s ease-in-out infinite !important;
    animation-delay: 
        calc(random() * -4s),
        calc(random() * -2s);
}

.chaos-level-max .card {
    animation: 
        cardLife 3s ease-in-out infinite,
        cardTwitch 1.5s ease-in-out infinite,
        chromaticBackgroundMax 1.5s ease-in-out infinite !important;
    animation-delay: 
        calc(random() * -3s),
        calc(random() * -1.5s);
}

/* Ensure animations work on mobile */
@media (hover: none) and (pointer: coarse) {
    .card {
        animation: 
            cardFloat 3s ease-in-out infinite,
            cardLife 4s ease-in-out infinite !important;
        transform: none !important;
        transition: transform 0.3s ease, opacity 0.3s ease, background-color 0.3s ease;
    }

    .card:active:not(.played) {
        background: #555;
        transform: scale(0.98) !important;
    }

    .card.played[data-selected="true"] {
        animation: selectedCardVanish 0.5s ease-out forwards !important;
    }

    .card.played:not([data-selected="true"]) {
        animation: none !important;
        transform: scale(0.5) !important;
        opacity: 0 !important;
    }

    .chaos-level-1 .card {
        animation: 
            cardFloat 2.8s ease-in-out infinite,
            cardLife 4s ease-in-out infinite,
            cardAliveChaos1 5s ease-in-out infinite !important;
    }

    .chaos-level-2 .card {
        animation: 
            cardFloat 2.5s ease-in-out infinite,
            cardLife 3.5s ease-in-out infinite,
            cardTwitchChaos 3s ease-in-out infinite !important;
    }

    .chaos-level-3 .card,
    .chaos-level-max .card {
        animation: 
            cardFloat 2s ease-in-out infinite,
            cardLife 3s ease-in-out infinite,
            colorCycle 4s infinite !important;
    }

    /* Keep other mobile rules... */
    
    .card.dissolving {
        animation: selectedCardVanish 0.8s ease-out forwards !important;
        pointer-events: none;
        z-index: 999;
        will-change: transform, opacity, clip-path;
        transform-origin: center center;
    }
}

/* Update card hover styles to make animation slower */
.card:hover:not(.played) {
    background: #555;
    transform: translateY(-5px);
}

/* Update the card played animations */
.card.played[data-selected="true"] {
    animation: selectedCardVanish 0.5s ease-out forwards !important;
    pointer-events: none;
}

.card.played:not([data-selected="true"]) {
    transform: scale(0.5) !important;
    opacity: 0 !important;
    transition: transform 0.3s ease-out, opacity 0.3s ease-out !important;
    pointer-events: none !important;
}

/* Remove the generic played class animation that was affecting both cards */
.card.played {
    pointer-events: none !important;
    animation: none !important;
}

/* Remove conflicting rules */
.card-container.clearing .card,
.card-container:not(.played) .card,
.card.played,
.card.played[data-selected="true"],
.card.played:not([data-selected="true"]) {
    animation: none !important;
}

/* Add these specific rules to handle chaos states and hover */
.chaos-level-1 .card,
.chaos-level-2 .card,
.chaos-level-3 .card,
.chaos-level-max .card {
    transform: none; /* Reset any existing transforms */
    transition: transform 0.3s ease-out;
}

.chaos-level-1 .card:hover,
.chaos-level-2 .card:hover,
.chaos-level-3 .card:hover,
.chaos-level-max .card:hover,
.chaos-level-1 .card:active,
.chaos-level-2 .card:active,
.chaos-level-3 .card:active,
.chaos-level-max .card:active {
    transform: translateY(-10px);
}

/* Force hover state to be removed when card is played */
.card.played {
    transform: none !important;
    transition: none !important;
}

/* Ensure touch devices maintain hover effect until card is played */
@media (hover: none) {
    /* More aggressive override for touch devices */
    .card,
    .card:hover,
    .card:active,
    .card.played,
    .chaos-level-1 .card,
    .chaos-level-2 .card,
    .chaos-level-3 .card,
    .chaos-level-max .card {
        animation: 
            cardFloat 3s ease-in-out infinite,
            cardLife 4.5s ease-in-out infinite !important;
        transform: none !important;
    }

    /* ONLY apply these transforms when card is actually played */
    .card.played[data-selected="true"] {
        animation: none !important;
        transform: scale(0.8) translateY(-20px) !important;
        opacity: 0 !important;
        transition: transform 0.5s ease-out, opacity 0.5s ease-out !important;
    }

    .card.played:not([data-selected="true"]) {
        animation: none !important;
        transform: scale(0.5) !important;
        opacity: 0 !important;
        transition: transform 0.3s ease-out, opacity 0.3s ease-out !important;
    }

    /* Remove touchExcited animation completely for touch devices */
    @keyframes touchExcited {
        0%, 100% { transform: scale(0.8) translateY(-20px); }
    }

    .card:hover {
        transform: none !important;
        animation: none !important;
    }
    
    .card {
        touch-action: manipulation;  /* Optimizes for touch */
    }
}

/* Reset any transform when new cards are drawn */
.card-container:not(.played) .card {
    transform: none !important;
    animation: none !important;
    transition: none !important;
}

.card:nth-child(odd) {
    animation: 
        cardFloat 3s ease-in-out infinite,
        cardLife 4.5s ease-in-out infinite,
        randomJitter 1.7s ease-in-out infinite;
    animation-delay: 
        -1.5s,
        calc(random() * -4s),
        calc(random() * -3s); /* Different random start time */
}

.card:nth-child(even) {
    animation: 
        cardFloat 3s ease-in-out infinite,
        cardLife 4.5s ease-in-out infinite,
        randomJitter 2.3s ease-in-out infinite;
    animation-delay: 
        0s,
        calc(random() * -4s),
        calc(random() * -2s); /* Different random start time */
}

#card-left {
    animation-delay: 
        calc(random() * -4s),
        calc(random() * -3s);
}

#card-right {
    animation-delay: 
        calc(random() * -4s),
        calc(random() * -3s);
}

.card h3 {
    font-size: 1.2em;
    margin-bottom: 10px;
    color: #f39c12;
}

.card-description {
    font-size: 0.9em;
    color: #ddd;
    line-height: 1.4;
    margin-bottom: auto;
    padding: 10px 0;
}

.card-effects {
    margin-top: auto;
    padding-top: 10px;
    font-size: 0.9em;
    border-top: 1px solid #555;
}

.stat-modifier {
    display: block;
    margin: 4px 0;
    font-weight: bold;
}

.positive {
    color: #2ecc71;
}

.negative {
    color: #e74c3c;
}

.card.unplayable {
    opacity: 0.85;  /* Increased from 0.7 for better visibility */
    cursor: not-allowed;
    background: #383838;  /* Slightly lighter for better contrast */
    filter: grayscale(50%);  /* Reduced from 80% to be less severe */
    border: 1px solid #555;
}

.card.unplayable:hover {
    transform: none;
    background: #383838;  /* Match the new background */
    animation: none;
}

.card.unplayable h3 {
    color: #888;  /* Changed from #666 to #888 */
}

.card.unplayable .card-description {
    color: #aaa;  /* Changed from #555 to #aaa */
}

.card.unplayable .card-effects {
    opacity: 0.8;  /* Changed from 0.6 to 0.8 */
}

.card.unplayable .requirement-text {
    color: #ff8080;  /* Brighter red for better visibility */
    font-size: 0.85em;
    margin-top: 4px;
    padding-top: 4px;
    opacity: 0.9;
}

.requirement-text {
    color: #ff6b6b;  /* Brightened from #e74c3c */
    font-size: 0.9em;  /* Increased from 0.8em */
    margin-top: 5px;
    border-top: 1px solid #555;
    padding-top: 5px;
    font-style: italic;
    text-transform: uppercase;
    letter-spacing: 1px;
    font-weight: bold;  /* Added for better visibility */
}

.button {
    background-color: #d35400;
    color: white;
    border: none;
    border-radius: 5px;
    padding: 10px 20px;
    cursor: pointer;
    font-size: 1.2em;
    transition: background-color 0.3s;
}

.button:hover {
    background-color: #e67e22;
}

.button:disabled {
    background-color: #7f8c8d;
    cursor: not-allowed;
}

.button.primary {
    font-size: 1.2em;
    padding: 10px 20px;
    margin: 20px 0;
    width: 200px;
}

.button.secondary {
    background-color: #7f8c8d;
    margin: 10px;
}

.button.secondary:hover {
    background-color: #95a5a6;
}

.button.secondary.small {
    font-size: 0.8em;
    padding: 5px 10px;
    position: absolute;
    bottom: 10px;
    right: 10px;
    background-color: #e74c3c; /* Red color for reset achievements */
}

#share-results {
    font-size: 0.9em;
    padding: 8px 16px;
    position: absolute;
    bottom: 45px;
    right: 10px;
    background-color: #3498db; /* New blue color */
}

.meter {
    width: 100%;
    background-color: #e0e0e0;
    border-radius: 5px;
    margin: 10px 0;
}

.meter-fill {
    height: 20px;
    border-radius: 5px;
    transition: width 0.3s;
}

.noodletude {
    background-color: #27ae60;
}

.spice-level {
    background-color: #e67e22;
}

.corporate-compliance {
    background-color: #2980b9;
}

.boil-pressure {
    background-color: #c0392b;
}

#game-messages {
    margin: 20px auto;
    padding: 5px;
    height: 40px;
    min-height: 40px;
    background: #333;
    border-radius: 5px;
    width: calc(100% - 40px); /* Match stats container width */
    max-width: 800px;
    display: flex;
    align-items: center;
    justify-content: center;
    box-sizing: border-box; /* Add this to include padding in width calculation */
    overflow: hidden; /* Prevent overflow */
}

/* Update message type styles */
.message-box.feedback .message-text span {
    color: #ffd700; /* Yellow for feedback */
}

.message-box.situation .message-text span {
    color: #3498db; /* Blue for situations */
}

.message-box.chaos-warning .message-text span {
    color: #e74c3c; /* Red for chaos warnings */
    text-shadow: 0 0 5px rgba(231, 76, 60, 0.5);
}

.message-box {
    width: 100%;
    height: 100%;
    margin: 0;
    padding: 8px; /* Reduced from 12px */
    background: #2c3e50;
    background: linear-gradient(to right, #2c3e50, #3a506b);
    border-radius: 6px;
    color: #3498db; /* Default blue color */
    font-family: 'Courier New', monospace;
    font-size: 0.95em; /* Reduced from 1.1em */
    display: flex;
    align-items: center;
    justify-content: center;
    text-align: center;
    transition: opacity 0.5s ease-in-out;
}

.message-box.fading {
    opacity: 0;
}

.message-box.showing {
    opacity: 1;
}

/* Add specific color for feedback messages */
.message-box.feedback {
    color: #ffd700; /* Yellow for feedback */
}

/* Add specific color for situation messages */
.message-box.situation {
    color: #3498db; /* Blue for situations */
}

/* Add styles for message text container */
.message-text {
    display: -webkit-box;
    -webkit-line-clamp: 2; /* Show max 2 lines */
    -webkit-box-orient: vertical;
    overflow: hidden;
    text-overflow: ellipsis;
    width: 95%;
    margin: 0 auto;
    line-height: 1.2;
    text-align: center;
}

.message-text.fading {
    opacity: 0;
}

.achievement-popup {
    position: fixed;
    top: 20px;
    right: 20px;
    background: linear-gradient(135deg, #2c3e50, #3498db);
    border: 2px solid #f1c40e;
    border-radius: 12px;
    padding: 20px;
    color: #fff;
    z-index: 1000;
    box-shadow: 0 4px 15px rgba(0,0,0,0.3);
    animation: achievementSlide 0.5s ease-out;
    max-width: 300px;
    transform-origin: top right;
}

.achievement-popup h3 {
    color: #f1c40f;
    font-size: 1.2em;
    margin: 0 0 10px 0;
    text-shadow: 0 2px 4px rgba(0,0,0,0.3);
}

.achievement-popup .achievement-name {
    color: #2ecc71;
    font-size: 1.1em;
    margin: 8px 0;
    font-weight: bold;
}

.achievement-popup .achievement-desc {
    color: #ecf0f1;
    font-size: 0.9em;
    margin: 8px 0;
    line-height: 1.4;
}

.achievement-popup .achievement-reward {
    color: #f1c40e;
    font-size: 1em;
    margin: 8px 0 0 0;
    font-style: italic;
}

@keyframes achievementSlide {
    0% { 
        transform: translateX(120%) scale(0.8); 
        opacity: 0;
    }
    50% { 
        transform: translateX(-10%) scale(1.1);
    }
    100% { 
        transform: translateX(0) scale(1);
        opacity: 1;
    }
}

.achievement-popup:hover {
    transform: scale(1.02);
    transition: transform 0.2s ease;
}

/* Adjust chaos level classes to be less intense */
.chaos-level-1 .card {
    animation: subtleWiggle 4s ease-in-out infinite;
    filter: brightness(1.02);
}

.chaos-level-2 .card {
    animation: subtleWiggle 3s ease-in-out infinite, subtleDistort 5s infinite;
    filter: brightness(1.05) hue-rotate(2deg);
}

.chaos-level-3 .card {
    animation: distort 4s infinite, wiggle 3s infinite;
    filter: brightness(1.1) hue-rotate(5deg);
}

/* Update chaos level classes to prevent mobile scaling */
.chaos-level-1 {
    animation: chaosWarp 15s infinite;
    filter: hue-rotate(5deg);
    transform: none !important;
    width: 100%;
    overflow-x: hidden;
}

.chaos-level-2 {
    animation: chaosWarp 12s infinite;
    filter: hue-rotate(15deg) saturate(1.15);
    transform: none !important;
    width: 100%;
    overflow-x: hidden;
}

.chaos-level-3 {
    animation: 
        chaosBackgroundPulse 5s ease-in-out infinite,
        maxChaosWarp 6s ease-in-out infinite,
        chaosShake 10s ease-in-out infinite !important;
    filter: hue-rotate(25deg) saturate(1.4) brightness(1.1) !important;
    transform: none !important;
    width: 100%;
    overflow-x: hidden;
}

.chaos-level-max {
    animation: 
        chaosBackgroundPulse 4s ease-in-out infinite,
        maxChaosWarp 6s ease-in-out infinite !important;
    will-change: transform;
    backface-visibility: hidden;
    perspective: 1000px;
}

.chaos-level-max body {
    animation: subtleWiggle 6s infinite;
    filter: saturate(120%);
}

.chaos-level-max #game-container {
    animation: maxChaosWarp 6s ease-in-out infinite;
    will-change: transform;
    transform-style: preserve-3d;
    backface-visibility: hidden;
}

.chaos-level-max #stats {
    animation: 
        statsFloat 4s ease-in-out infinite,
        chaoticSpin 6s infinite !important;
}

.chaos-level-max .stat-value {
    animation: crtFlicker 2s infinite;
    text-shadow: 
        0.5px 0.5px rgba(255,0,0,0.3),
        -0.5px -0.5px rgba(0,255,0,0.3);
}

.chaos-level-max h1 {
    animation: crtWave 6s infinite;
    filter: contrast(110%);
}

.chaos-level-max .message-box {
    animation: heatwave 3s infinite;
    background: linear-gradient(45deg, #2c3e50, #c0392b);
}

/* Update the noise effect to be more like a CRT screen */
.chaos-noise::before {
    content: "";
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: repeating-linear-gradient(
        0deg,
        rgba(0, 0, 0, 0.1),
        rgba(0, 0, 0, 0.1) 1px,
        transparent 1px,
        transparent 2px
    );
    pointer-events: none;
    animation: scanline 10s linear infinite;
    opacity: 0.08;
    z-index: 9999;
}

.chaos-noise {
    animation: chaosNoise 4s infinite;
}

/* noodle rain styles */
.chaos-noodle {
    position: fixed;
    pointer-events: none;
    z-index: 1000;
    opacity: 0.8;
    width: var(--noodle-length, 40px); /* Make width dynamic */
    height: 20px;
    top: -20px;
}

.noodle-decoration {
    animation: noodleFlyAcross 8s ease-in-out forwards;  /* Added 'forwards' to maintain final state */
    position: fixed;
    bottom: 20px;
    left: 0;
    width: 100%;
    pointer-events: none;
    z-index: 1000;
    opacity: 0;  /* Start hidden */
}

.noodle-worm {
    width: 100%;
    height: 100%;
    display: block;
    animation: noodleWiggle 0.8s ease-in-out;
    transform-origin: center center;
    transform-box: fill-box;
}

.noodle-worm.moving {
    animation: noodleWiggle 1.2s ease-in-out infinite;
}

.game-over-screen {
    position: fixed;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    background: rgba(0, 0, 0, 0.95);
    padding: 1.5rem; /* Reduced from 2rem */
    border-radius: 10px;
    border: 2px solid #444;
    box-shadow: 0 0 20px rgba(0,0,0,0.5);
    z-index: 1000;
    width: 90%;
    max-width: 800px;
    max-height: 95vh; /* Adjusted from 90vh */
    overflow-y: auto;
    box-sizing: border-box;
    animation: gameOverFlash 0.6s ease-in-out 2; /* Changed from 3 to 2 flashes */
    font-size: 0.9em; /* Base size reduction for all content */
}

.game-over-content {
    text-align: center;
    position: relative;
    padding-bottom: 80px; /* Space for bottom buttons */
}

.secondary-buttons {
    position: sticky;
    bottom: 0;
    background: rgba(26, 26, 26, 0.9); /* Match your background color */
    padding: 10px;
    z-index: 1;
    border-top: 1px solid rgba(255, 255, 255, 0.1);
}

.primary-button {
    margin: 20px 0;
}

.game-over-content h2 {
    color: #e74c3c;
    font-size: 2em; /* Reduced from 2.5em */
    margin-bottom: 0.75rem; /* Reduced from 1rem */
}

.end-reason {
    font-size: 1.1em; /* Reduced from 1.2em */
    color: #bbb;
    margin-bottom: 1.5rem; /* Reduced from 2rem */
}

.final-stats {
    margin: 1.5rem 0; /* Reduced from 2rem */
}

.stat-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
    gap: 0.75rem; /* Reduced from 1rem */
    margin: 0.75rem 0; /* Reduced from 1rem */
}

.final-stat {
    display: flex;
    flex-direction: column;
    align-items: center;
    padding: 0.75rem; /* Reduced from 1rem */
    background: rgba(255, 255, 255, 0.1);
    border-radius: 5px;
}

.final-stat span:first-child {
    font-size: 0.9em;
    margin-bottom: 0.5rem;
}

.final-stat span:last-child {
    font-size: 1.5em; /* Reduced from 1.8em */
    font-weight: bold;
}

.achievements-section {
    position: relative;
    margin: 1.5rem 0;
    padding-bottom: 60px; /* Increased to accommodate buttons */
}

.achievements-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(180px, 1fr)); /* Reduced from 200px */
    gap: 0.75rem; /* Reduced from 1rem */
    margin: 0.75rem 0; /* Reduced from 1rem */
}

.achievement-item {
    background: rgba(255, 255, 255, 0.1);
    padding: 0.75rem; /* Reduced from 1rem */
    border-radius: 5px;
    text-align: left;
    font-size: 0.85em; /* Additional reduction for achievements */
}

.achievement-name {
    display: block;
    color: #f1c40f;
    font-weight: bold;
    margin-bottom: 0.5rem;
}

.achievement-desc {
    display: block;
    color: #bbb;
    font-size: 0.9em;
}

#new-game {
    display: block;
    width: 200px;
    margin: 1.5rem auto; /* Center the button */
    font-size: 1.1em; /* Reduced from 1.2em */
    padding: 0.6rem 1.75rem; /* Reduced from 0.75rem 2rem */
    margin-top: 1.5rem; /* Reduced from 2rem */
    background: #e67e22;
    transition: background-color 0.3s;
    white-space: nowrap; /* Keep text on one line */
    height: auto; /* Let height be determined by content */
    line-height: 1.2; /* Adjust line height to be more compact */
}

#new-game:hover {
    background: #d35400;
}

.jiggly {
    display: inline-block;
    animation: none;
}

.jiggly.active {
    animation: noodleWiggle 0.8s ease-in-out;
}

/* Remove hover effect to make it more subtle */
.jiggly:hover {
    animation: none;
}

/* Add near other game-over related styles */
.score-display {
    display: flex;
    justify-content: center;
    gap: 1.5rem; /* Reduced from 2rem */
    margin: 1.5rem 0; /* Reduced from 2rem */
    padding: 0.75rem; /* Reduced from 1rem */
    background: rgba(255, 255, 255, 0.1);
    border-radius: 10px;
}

.current-score,
.high-score {
    text-align: center;
}

.score-value {
    display: block;
    font-size: 2.5em; /* Reduced from 3em */
    font-weight: bold;
    color: #FF00FF;
    margin: 0.4rem 0; /* Reduced from 0.5rem */
}

/* Add a glow effect when new high score is achieved */
.new-high-score .score-value {
    animation: glow 1s ease-in-out infinite alternate;
}

@keyframes glow {
    from {
        text-shadow: 0 0 5px #fff, 0 0 10px #fff, 0 0 15px #e67e22;
    }
    to {
        text-shadow: 0 0 10px #fff, 0 0 20px #fff, 0 0 30px #e67e22;
    }
}

/* Add these media queries at the end of your CSS file */
@media screen and (max-width: 768px) {
    h1 {
        font-size: 2em;
        margin-bottom: 10px;
    }

    #stats {
        margin: 15px auto;
        width: 92%; /* Slightly narrower to prevent overflow */
        gap: 4px; /* Reduced gap between stats */
        padding: 6px;
        justify-content: space-between;
        flex-wrap: nowrap;
        overflow-x: hidden;
    }

    .stat {
        padding: 4px;
        min-width: 0; /* Allow stats to shrink */
        margin: 0;
        flex: 1;
        width: auto; /* Let flex handle the width */
    }

    .stat-value {
        font-size: 1em;
        /* Keep animation properties */
        display: inline-block;
        transition: transform 0.3s ease;
    }

    .stat-value.increase,
    .stat-value.decrease {
        animation-duration: 0.6s;
        animation-timing-function: ease-in-out;
    }

    /* Ensure color-specific effects remain */
    .prestige-color.increase { text-shadow: 0 0 10px #f1c40f; }
    .chaos-color.increase { text-shadow: 0 0 10px #e74c3c; }
    .ingredients-color.increase { text-shadow: 0 0 10px #2ecc71; }
    .energy-color.increase { text-shadow: 0 0 10px #3498db; }
    
    .stat-value.decrease { text-shadow: 0 0 10px #e74c3c; }

    .stat-label {
        font-size: 0.7em; /* Even smaller label */
        white-space: nowrap;
    }

    .stat-progress {
        margin: 3px auto;
        width: 85%; /* Slightly narrower progress bar */
    }

    #cards-container {
        gap: 20px; /* Restore original gap */
        margin: 20px auto;
        width: 95%; /* Give more width */
        max-width: 600px;
        overflow-x: visible; /* Allow cards to be fully visible */
    }

    .card {
        width: 45%; /* Use percentage instead of calc */
        min-width: 140px;
        margin: 0; /* Remove margin since we have gap */
        padding: 12px;
    }

    #game-container {
        width: 100%;
        padding: 0 10px;
        box-sizing: border-box;
        overflow-x: hidden;
    }

    #game-messages {
        margin: 10px auto; /* Match stats container margin */
        width: calc(100% - 20px); /* Adjust width calculation for mobile */
        max-width: calc(100vw - 20px);
        overflow-x: hidden;
    }

    .message-box {
        padding: 8px;
        font-size: 0.9em;
        min-height: 25px;
        height: auto;
    }

    .button {
        padding: 8px 16px;
        font-size: 1em;
    }

    body.chaos-level-2,
    body.chaos-level-3,
    body.chaos-level-max {
        animation-duration: 8s !important;
    }

    body.chaos-level-max {
        filter: hue-rotate(25deg) saturate(1.4) brightness(1.1) !important;
    }

    .achievements-section {
        padding-bottom: 100px; /* More space for stacked buttons */
    }

    #new-game {
        width: 80%; /* Make button wider on mobile */
        max-width: 300px;
        margin: 1rem auto;
    }

    #share-results {
        width: auto;
        bottom: 50px;
        right: 10px;
    }

    .button.secondary.small {
        width: auto;
        bottom: 10px;
        right: 10px;
    }

    /* Ensure played card animations still work */
    .card.played[data-selected="true"] {
        animation: touchExcited 0.4s ease-in-out !important;
        transform: scale(0.8) translateY(-20px) !important;
    }

    .card.played:not([data-selected="true"]) {
        animation: none !important;
        transform: scale(0.5) !important;
    }
}

/* Extra small screens */
@media screen and (max-width: 360px) {
    #stats {
        width: 94%;
        gap: 2px; /* Minimum gap */
    }

    .stat {
        padding: 3px;
    }

    .stat-value {
        font-size: 0.9em;
    }

    .stat-label {
        font-size: 0.65em;
    }

    .card {
        width: 130px;
        height: 220px;
        padding: 8px;
    }

    .stat-value {
        font-size: 1.2em;
    }

    .stat-label {
        font-size: 0.7em;
    }

    #game-messages {
        margin: 8px auto;
        width: calc(100% - 16px);
    }

    #stats {
        margin: 8px auto;
        width: calc(100% - 16px);
    }
}

/* disable hover effects on touch devices */
@media (hover: none) {
    .card:hover,
    .chaos-level-1 .card:hover,
    .chaos-level-2 .card:hover,
    .chaos-level-3 .card:hover,
    .chaos-level-max .card:hover {
        animation: none !important;
        transform: none !important;
    }

    /* Replace hover animations with touch animations */
    .card:active {
        animation: touchExcited 0.3s ease-in-out !important;
    }

    .card,
    .card:hover,
    .card:active {
        background: #444 !important;  /* Force default background */
        transform: none !important;   /* Prevent any transform */
    }

    /* Ensure divider line is always visible */
    .card .card-effects {
        border-top: 1px solid #555 !important;
    }

    /* Override any hover states that might get stuck */
    .card::after,
    .card:hover::after,
    .card:active::after {
        display: none !important;
    }
}

/* Update the existing card hover styles to be more specific */
@media (hover: hover) {
    .card:hover {
        animation: hoverExcited 1s ease-in-out infinite !important;
    }
}

@media (hover: none) and (pointer: coarse) {
    /* Force override ALL card animations on touch devices */
    .card,
    .card:hover,
    .card:active,
    .card.chaos-level-1,
    .card.chaos-level-2,
    .card.chaos-level-3,
    .card.chaos-level-max {
        animation: none !important;
        transform: none !important;
        transition: none !important;
        -webkit-tap-highlight-color: transparent !important;
        touch-action: manipulation !important;
    }

    /* Only animate when card is actually played */
    .card.played[data-selected="true"] {
        animation: none !important;
        transform: scale(0.8) translateY(-20px) !important;
        opacity: 0 !important;
        pointer-events: none !important;
    }
}

/* Ensure new cards don't inherit any hover states */
.card-container.clearing .card,
.card-container:not(.played) .card {
    background: #444 !important;
    transform: none !important;
    transition: none !important;
    border-top-color: #555 !important;
}

/* Force remove stuck states when cards are removed */
.card-container.clearing .card {
    animation: none !important;
    transform: none !important;
    transition: none !important;
}

/* Add this media query to disable hover effects on touch devices */
@media (hover: none) {
    .card:hover,
    .chaos-level-1 .card:hover,
    .chaos-level-2 .card:hover,
    .chaos-level-3 .card:hover,
    .chaos-level-max .card:hover {
        animation: none !important;
        transform: none !important;
    }

    /* Replace hover animations with touch animations */
    .card:active {
        animation: touchExcited 0.3s ease-in-out !important;
    }
}

/* Update the existing card hover styles to be more specific */
@media (hover: hover) {
    .card:hover {
        animation: hoverExcited 1s ease-in-out infinite !important;
    }
}

@media (hover: none) and (pointer: coarse) {
    /* Force override ALL card animations on touch devices */
    .card,
    .card:hover,
    .card:active,
    .card.chaos-level-1,
    .card.chaos-level-2,
    .card.chaos-level-3,
    .card.chaos-level-max {
        animation: none !important;
        transform: none !important;
        transition: none !important;
        -webkit-tap-highlight-color: transparent !important;
        touch-action: manipulation !important;
    }

    /* Only animate when card is actually played */
    .card.played[data-selected="true"] {
        animation: none !important;
        transform: scale(0.8) translateY(-20px) !important;
        opacity: 0 !important;
        pointer-events: none !important;
    }
}

/* Ensure new cards don't inherit any hover states */
.card-container.clearing .card,
.card-container:not(.played) .card {
    background: #444 !important;
    transform: none !important;
    transition: none !important;
    border-top-color: #555 !important;
}

.wiggle-selected {
    animation: wiggle-selected 0.5s ease-in-out !important;
    transform-origin: center center;
}

/* Fix card dissolving animation */
.card.dissolving {
    animation: selectedCardVanish 0.8s ease-out forwards !important;
    pointer-events: none;
    z-index: 999;
    will-change: transform, opacity, clip-path;
    transform-origin: center center;
}

/* Ensure no other animations interfere with the dissolving animation */
.card.dissolving.chaos-level-1,
.card.dissolving.chaos-level-2,
.card.dissolving.chaos-level-3,
.card.dissolving.chaos-level-max {
    animation: selectedCardVanish 0.8s ease-out forwards !important;
}

/* Fix upgrade card pinning animation */
.upgrade-card {
    position: relative;
    transition: all 0.5s ease-out;
    transform-origin: center center;
    will-change: transform, opacity;
}

/* Override any interfering animations when card is being moved to upgrades */
.card[data-selected="true"] {
    z-index: 1000;
    position: fixed;
    pointer-events: none;
    transition: all 0.5s ease-out;
    will-change: transform;
}

/* Ensure the original card stays visible during transition */
.card[data-selected="true"]:not(.dissolving) {
    opacity: 1 !important;
}

/* Smoke particle styling */
.smoke-particle {
    position: fixed;
    width: 12px;
    height: 12px;
    background: rgba(255, 255, 255, 0.9);
    border-radius: 50%;
    pointer-events: none;
    z-index: 1000;
    will-change: transform, opacity;
    animation: smoke 1s ease-out forwards;
}

@keyframes smoke {
    0% {
        transform: translate(0, 0) scale(1);
        opacity: 0.9;
        background: rgba(255, 255, 255, 0.9);
    }
    50% {
        opacity: 0.6;
        background: rgba(230, 230, 230, 0.6);
    }
    100% {
        transform: translate(var(--tx), var(--ty)) scale(2.5);
        opacity: 0;
        background: rgba(200, 200, 200, 0);
    }
}

/* Add dissolving card styles */
.card.dissolving {
    animation: selectedCardVanish 0.8s ease-out forwards !important;
    pointer-events: none;
    z-index: 999;
    will-change: transform, opacity, clip-path;
    transform-origin: center center;
}

/* Ensure the dissolving card stays above the smoke */
.card.dissolving {
    z-index: 999;
}

/* Fire particle effect */
.fire-particle {
    position: fixed;
    width: 8px;
    height: 8px;
    background: #ff4400;
    border-radius: 50%;
    pointer-events: none;
    z-index: 1000;
    will-change: transform, opacity;
    filter: blur(1px);
    animation: fire 1s ease-out forwards;
}

@keyframes fire {
    0% {
        transform: translate(0, 0) scale(1);
        opacity: 1;
        background: #ff4400;
    }
    50% {
        opacity: 0.8;
        background: #ff8800;
    }
    100% {
        transform: translate(var(--tx), var(--ty)) scale(0.1);
        opacity: 0;
        background: #ffff00;
    }
}

/* Water splash effect */
.water-splash {
    position: fixed;
    pointer-events: none;
    z-index: 1000;
}

.water-droplet {
    position: absolute;
    width: 6px;
    height: 6px;
    background: #00a0ff;
    border-radius: 50%;
    filter: blur(1px);
    animation: splash 0.8s ease-out forwards;
}

@keyframes splash {
    0% {
        transform: rotate(var(--angle)) translateX(0) scale(1);
        opacity: 0.8;
    }
    100% {
        transform: rotate(var(--angle)) translateX(50px) scale(0.1);
        opacity: 0;
    }
}

/* Exploding noodle effect */
.exploding-noodle {
    position: fixed;
    width: 20px;
    height: 4px;
    background: #ffe4b5;
    border-radius: 2px;
    pointer-events: none;
    z-index: 1000;
    will-change: transform, opacity;
    animation: noodleExplode 1s ease-out forwards;
}

@keyframes noodleExplode {
    0% {
        transform: translate(0, 0) rotate(0deg);
        opacity: 1;
    }
    100% {
        transform: translate(var(--tx), var(--ty)) rotate(var(--rotation));
        opacity: 0;
    }
}

/* Money symbol effect */
.money-symbol {
    position: fixed;
    font-size: 24px;
    color: #2ecc71;
    pointer-events: none;
    z-index: 1000;
    will-change: transform, opacity;
    animation: money 1.5s ease-out forwards;
    text-shadow: 0 0 5px rgba(46, 204, 113, 0.5);
}

@keyframes money {
    0% {
        transform: translate(0, 0) scale(1) rotate(0deg);
        opacity: 1;
    }
    50% {
        opacity: 1;
    }
    100% {
        transform: translate(var(--tx), var(--ty)) scale(0.2) rotate(360deg);
        opacity: 0;
    }
}

/* Add these new styles for mini upgrade cards */
.upgrades-container {
    margin-top: 20px;
    padding: 10px;
    width: 100%;
}

.upgrades-grid {
    display: flex;
    flex-wrap: wrap;
    gap: 10px;
    justify-content: center;
}

.upgrade-card {
    width: 120px;
    height: 60px;
    padding: 8px;
    background: #444;
    border-radius: 8px;
    font-size: 0.55em;
    display: flex;
    flex-direction: column;
    transition: transform 0.3s ease;
    cursor: pointer;
}

.upgrade-card.selling {
    background: #4a4a4a;
}

.sell-confirm {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.8);
    border-radius: 8px;
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    gap: 8px;
}

.sell-text {
    color: #fff;
    font-size: 0.9em;
}

.sell-buttons {
    display: flex;
    gap: 8px;
}

.sell-buttons button {
    padding: 4px 8px;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    font-size: 0.8em;
}

.sell-yes {
    background: #e74c3c;
    color: white;
}

.sell-no {
    background: #7f8c8d;
    color: white;
}

.sell-yes:hover {
    background: #c0392b;
}

.sell-no:hover {
    background: #95a5a6;
}

.upgrade-card h4 {
    color: #f39c12;
    font-size: 0.9em;
    margin: 0 0 5px 0;
}

.upgrade-card .upgrade-effects {
    margin-top: auto;
    padding-top: 5px;
    border-top: 1px solid #555;
}

.upgrade-card .permanent-effect {
    margin: 3px 0;
    font-weight: bold;
}

/* Color classes for permanent effects */
.upgrade-card .prestigeGain-color { color: #f1c40f; }
.upgrade-card .chaosReduction-color { color: #e74c3c; }
.upgrade-card .workerEfficiency-color { color: #3498db; }